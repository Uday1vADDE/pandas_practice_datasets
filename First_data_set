{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":4904103,"sourceType":"datasetVersion","datasetId":2844100}],"dockerImageVersionId":31089,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-28T04:47:35.486645Z","iopub.execute_input":"2025-09-28T04:47:35.486920Z","iopub.status.idle":"2025-09-28T04:47:35.495423Z","shell.execute_reply.started":"2025-09-28T04:47:35.486900Z","shell.execute_reply":"2025-09-28T04:47:35.494586Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/pandas-practice-dataset/data.csv\n","output_type":"stream"}],"execution_count":48},{"cell_type":"code","source":"import pandas as pd\ndf=pd.read_csv(\"/kaggle/input/pandas-practice-dataset/data.csv\")\ndf","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T04:47:35.496565Z","iopub.execute_input":"2025-09-28T04:47:35.497040Z","iopub.status.idle":"2025-09-28T04:47:35.517099Z","shell.execute_reply.started":"2025-09-28T04:47:35.497011Z","shell.execute_reply":"2025-09-28T04:47:35.516267Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":49,"output_type":"execute_result","data":{"text/plain":"    Duration          Date  Pulse  Maxpulse  Calories\n0         60  '2020/12/01'    110       130     409.1\n1         60  '2020/12/02'    117       145     479.0\n2         60  '2020/12/03'    103       135     340.0\n3         45  '2020/12/04'    109       175     282.4\n4         45  '2020/12/05'    117       148     406.0\n5         60  '2020/12/06'    102       127     300.0\n6         60  '2020/12/07'    110       136     374.0\n7        450  '2020/12/08'    104       134     253.3\n8         30  '2020/12/09'    109       133     195.1\n9         60  '2020/12/10'     98       124     269.0\n10        60  '2020/12/11'    103       147     329.3\n11        60  '2020/12/12'    100       120     250.7\n12        60  '2020/12/12'    100       120     250.7\n13        60  '2020/12/13'    106       128     345.3\n14        60  '2020/12/14'    104       132     379.3\n15        60  '2020/12/15'     98       123     275.0\n16        60  '2020/12/16'     98       120     215.2\n17        60  '2020/12/17'    100       120     300.0\n18        45  '2020/12/18'     90       112       NaN\n19        60  '2020/12/19'    103       123     323.0\n20        45  '2020/12/20'     97       125     243.0\n21        60  '2020/12/21'    108       131     364.2\n22        45           NaN    100       119     282.0\n23        60  '2020/12/23'    130       101     300.0\n24        45  '2020/12/24'    105       132     246.0\n25        60  '2020/12/25'    102       126     334.5\n26        60      20201226    100       120     250.0\n27        60  '2020/12/27'     92       118     241.0\n28        60  '2020/12/28'    103       132       NaN\n29        60  '2020/12/29'    100       132     280.0\n30        60  '2020/12/30'    102       129     380.3\n31        60  '2020/12/31'     92       115     243.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Duration</th>\n      <th>Date</th>\n      <th>Pulse</th>\n      <th>Maxpulse</th>\n      <th>Calories</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>60</td>\n      <td>'2020/12/01'</td>\n      <td>110</td>\n      <td>130</td>\n      <td>409.1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>60</td>\n      <td>'2020/12/02'</td>\n      <td>117</td>\n      <td>145</td>\n      <td>479.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>60</td>\n      <td>'2020/12/03'</td>\n      <td>103</td>\n      <td>135</td>\n      <td>340.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>45</td>\n      <td>'2020/12/04'</td>\n      <td>109</td>\n      <td>175</td>\n      <td>282.4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>45</td>\n      <td>'2020/12/05'</td>\n      <td>117</td>\n      <td>148</td>\n      <td>406.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>60</td>\n      <td>'2020/12/06'</td>\n      <td>102</td>\n      <td>127</td>\n      <td>300.0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>60</td>\n      <td>'2020/12/07'</td>\n      <td>110</td>\n      <td>136</td>\n      <td>374.0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>450</td>\n      <td>'2020/12/08'</td>\n      <td>104</td>\n      <td>134</td>\n      <td>253.3</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>30</td>\n      <td>'2020/12/09'</td>\n      <td>109</td>\n      <td>133</td>\n      <td>195.1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>60</td>\n      <td>'2020/12/10'</td>\n      <td>98</td>\n      <td>124</td>\n      <td>269.0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>60</td>\n      <td>'2020/12/11'</td>\n      <td>103</td>\n      <td>147</td>\n      <td>329.3</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>60</td>\n      <td>'2020/12/12'</td>\n      <td>100</td>\n      <td>120</td>\n      <td>250.7</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>60</td>\n      <td>'2020/12/12'</td>\n      <td>100</td>\n      <td>120</td>\n      <td>250.7</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>60</td>\n      <td>'2020/12/13'</td>\n      <td>106</td>\n      <td>128</td>\n      <td>345.3</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>60</td>\n      <td>'2020/12/14'</td>\n      <td>104</td>\n      <td>132</td>\n      <td>379.3</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>60</td>\n      <td>'2020/12/15'</td>\n      <td>98</td>\n      <td>123</td>\n      <td>275.0</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>60</td>\n      <td>'2020/12/16'</td>\n      <td>98</td>\n      <td>120</td>\n      <td>215.2</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>60</td>\n      <td>'2020/12/17'</td>\n      <td>100</td>\n      <td>120</td>\n      <td>300.0</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>45</td>\n      <td>'2020/12/18'</td>\n      <td>90</td>\n      <td>112</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>60</td>\n      <td>'2020/12/19'</td>\n      <td>103</td>\n      <td>123</td>\n      <td>323.0</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>45</td>\n      <td>'2020/12/20'</td>\n      <td>97</td>\n      <td>125</td>\n      <td>243.0</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>60</td>\n      <td>'2020/12/21'</td>\n      <td>108</td>\n      <td>131</td>\n      <td>364.2</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>45</td>\n      <td>NaN</td>\n      <td>100</td>\n      <td>119</td>\n      <td>282.0</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>60</td>\n      <td>'2020/12/23'</td>\n      <td>130</td>\n      <td>101</td>\n      <td>300.0</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>45</td>\n      <td>'2020/12/24'</td>\n      <td>105</td>\n      <td>132</td>\n      <td>246.0</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>60</td>\n      <td>'2020/12/25'</td>\n      <td>102</td>\n      <td>126</td>\n      <td>334.5</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>60</td>\n      <td>20201226</td>\n      <td>100</td>\n      <td>120</td>\n      <td>250.0</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>60</td>\n      <td>'2020/12/27'</td>\n      <td>92</td>\n      <td>118</td>\n      <td>241.0</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>60</td>\n      <td>'2020/12/28'</td>\n      <td>103</td>\n      <td>132</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>60</td>\n      <td>'2020/12/29'</td>\n      <td>100</td>\n      <td>132</td>\n      <td>280.0</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>60</td>\n      <td>'2020/12/30'</td>\n      <td>102</td>\n      <td>129</td>\n      <td>380.3</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>60</td>\n      <td>'2020/12/31'</td>\n      <td>92</td>\n      <td>115</td>\n      <td>243.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":49},{"cell_type":"code","source":"df.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T04:47:35.518192Z","iopub.execute_input":"2025-09-28T04:47:35.518428Z","iopub.status.idle":"2025-09-28T04:47:35.523337Z","shell.execute_reply.started":"2025-09-28T04:47:35.518410Z","shell.execute_reply":"2025-09-28T04:47:35.522690Z"}},"outputs":[{"execution_count":50,"output_type":"execute_result","data":{"text/plain":"(32, 5)"},"metadata":{}}],"execution_count":50},{"cell_type":"code","source":"df.columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T04:47:35.524047Z","iopub.execute_input":"2025-09-28T04:47:35.524310Z","iopub.status.idle":"2025-09-28T04:47:35.538967Z","shell.execute_reply.started":"2025-09-28T04:47:35.524291Z","shell.execute_reply":"2025-09-28T04:47:35.538072Z"}},"outputs":[{"execution_count":51,"output_type":"execute_result","data":{"text/plain":"Index(['Duration', 'Date', 'Pulse', 'Maxpulse', 'Calories'], dtype='object')"},"metadata":{}}],"execution_count":51},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T04:47:35.540299Z","iopub.execute_input":"2025-09-28T04:47:35.540564Z","iopub.status.idle":"2025-09-28T04:47:35.555667Z","shell.execute_reply.started":"2025-09-28T04:47:35.540543Z","shell.execute_reply":"2025-09-28T04:47:35.554786Z"}},"outputs":[{"execution_count":52,"output_type":"execute_result","data":{"text/plain":"   Duration          Date  Pulse  Maxpulse  Calories\n0        60  '2020/12/01'    110       130     409.1\n1        60  '2020/12/02'    117       145     479.0\n2        60  '2020/12/03'    103       135     340.0\n3        45  '2020/12/04'    109       175     282.4\n4        45  '2020/12/05'    117       148     406.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Duration</th>\n      <th>Date</th>\n      <th>Pulse</th>\n      <th>Maxpulse</th>\n      <th>Calories</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>60</td>\n      <td>'2020/12/01'</td>\n      <td>110</td>\n      <td>130</td>\n      <td>409.1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>60</td>\n      <td>'2020/12/02'</td>\n      <td>117</td>\n      <td>145</td>\n      <td>479.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>60</td>\n      <td>'2020/12/03'</td>\n      <td>103</td>\n      <td>135</td>\n      <td>340.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>45</td>\n      <td>'2020/12/04'</td>\n      <td>109</td>\n      <td>175</td>\n      <td>282.4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>45</td>\n      <td>'2020/12/05'</td>\n      <td>117</td>\n      <td>148</td>\n      <td>406.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":52},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T04:47:35.556799Z","iopub.execute_input":"2025-09-28T04:47:35.557035Z","iopub.status.idle":"2025-09-28T04:47:35.576829Z","shell.execute_reply.started":"2025-09-28T04:47:35.557015Z","shell.execute_reply":"2025-09-28T04:47:35.575982Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 32 entries, 0 to 31\nData columns (total 5 columns):\n #   Column    Non-Null Count  Dtype  \n---  ------    --------------  -----  \n 0   Duration  32 non-null     int64  \n 1   Date      31 non-null     object \n 2   Pulse     32 non-null     int64  \n 3   Maxpulse  32 non-null     int64  \n 4   Calories  30 non-null     float64\ndtypes: float64(1), int64(3), object(1)\nmemory usage: 1.4+ KB\n","output_type":"stream"}],"execution_count":53},{"cell_type":"code","source":"df['Date']=pd.to_datetime(df['Date'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T04:47:35.577707Z","iopub.execute_input":"2025-09-28T04:47:35.578040Z","iopub.status.idle":"2025-09-28T04:47:35.610399Z","shell.execute_reply.started":"2025-09-28T04:47:35.578012Z","shell.execute_reply":"2025-09-28T04:47:35.608918Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_36/3023999556.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Date'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_datetime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Date'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/tools/datetimes.py\u001b[0m in \u001b[0;36mto_datetime\u001b[0;34m(arg, errors, dayfirst, yearfirst, utc, format, exact, unit, infer_datetime_format, origin, cache)\u001b[0m\n\u001b[1;32m   1065\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcache_array\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1066\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1067\u001b[0;31m             \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconvert_listlike\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_values\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1068\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_constructor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1069\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mABCDataFrame\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mabc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMutableMapping\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/tools/datetimes.py\u001b[0m in \u001b[0;36m_convert_listlike_datetimes\u001b[0;34m(arg, format, name, utc, unit, errors, dayfirst, yearfirst, exact)\u001b[0m\n\u001b[1;32m    431\u001b[0m     \u001b[0;31m# `format` could be inferred, or user didn't ask for mixed-format parsing.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    432\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mformat\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mformat\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"mixed\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 433\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_array_strptime_with_fallback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mutc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexact\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    434\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    435\u001b[0m     result, tz_parsed = objects_to_datetime64(\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/tools/datetimes.py\u001b[0m in \u001b[0;36m_array_strptime_with_fallback\u001b[0;34m(arg, name, utc, fmt, exact, errors)\u001b[0m\n\u001b[1;32m    465\u001b[0m     \u001b[0mCall\u001b[0m \u001b[0marray_strptime\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mfallback\u001b[0m \u001b[0mbehavior\u001b[0m \u001b[0mdepending\u001b[0m \u001b[0mon\u001b[0m \u001b[0;34m'errors'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    466\u001b[0m     \"\"\"\n\u001b[0;32m--> 467\u001b[0;31m     \u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtz_out\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marray_strptime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfmt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexact\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mexact\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mutc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mutc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    468\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mtz_out\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    469\u001b[0m         \u001b[0munit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdatetime_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mstrptime.pyx\u001b[0m in \u001b[0;36mpandas._libs.tslibs.strptime.array_strptime\u001b[0;34m()\u001b[0m\n","\u001b[0;32mstrptime.pyx\u001b[0m in \u001b[0;36mpandas._libs.tslibs.strptime.array_strptime\u001b[0;34m()\u001b[0m\n","\u001b[0;32mstrptime.pyx\u001b[0m in \u001b[0;36mpandas._libs.tslibs.strptime._parse_with_format\u001b[0;34m()\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: time data \"20201226\" doesn't match format \"'%Y/%m/%d'\", at position 26. You might want to try:\n    - passing `format` if your strings have a consistent format;\n    - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;\n    - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this."],"ename":"ValueError","evalue":"time data \"20201226\" doesn't match format \"'%Y/%m/%d'\", at position 26. You might want to try:\n    - passing `format` if your strings have a consistent format;\n    - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;\n    - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.","output_type":"error"}],"execution_count":54},{"cell_type":"markdown","source":"so when we have a dirty data like above which gives an error so simply we can make that date as NaN or NaT by using errors='coerce' in to_datetime funtion.","metadata":{}},{"cell_type":"code","source":"df['Date']=pd.to_datetime(df['Date'], errors='coerce')\ndf.dtypes","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T04:47:35.610937Z","iopub.status.idle":"2025-09-28T04:47:35.611273Z","shell.execute_reply.started":"2025-09-28T04:47:35.611077Z","shell.execute_reply":"2025-09-28T04:47:35.611089Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## df[df.isnull().any(axis=0)]","metadata":{"execution":{"iopub.status.busy":"2025-09-28T00:48:19.903731Z","iopub.execute_input":"2025-09-28T00:48:19.904193Z","iopub.status.idle":"2025-09-28T00:48:19.920174Z","shell.execute_reply.started":"2025-09-28T00:48:19.904168Z","shell.execute_reply":"2025-09-28T00:48:19.918862Z"}}},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T04:47:35.612488Z","iopub.status.idle":"2025-09-28T04:47:35.612810Z","shell.execute_reply.started":"2025-09-28T04:47:35.612637Z","shell.execute_reply":"2025-09-28T04:47:35.612653Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"we can see missing values in calories and date columns","metadata":{}},{"cell_type":"code","source":"df[df.isnull().any(axis=1)]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T04:47:35.613652Z","iopub.status.idle":"2025-09-28T04:47:35.613960Z","shell.execute_reply.started":"2025-09-28T04:47:35.613799Z","shell.execute_reply":"2025-09-28T04:47:35.613815Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"To see the missing values rows","metadata":{}},{"cell_type":"code","source":"df[df.isnull().any(axis=1)]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T04:47:35.615083Z","iopub.status.idle":"2025-09-28T04:47:35.615357Z","shell.execute_reply.started":"2025-09-28T04:47:35.615246Z","shell.execute_reply":"2025-09-28T04:47:35.615258Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"Boolean Series inside df[...] selects rows\n\nLength of Boolean Series must match number of rows\n\nTrue → row is included\n\nFalse → row is excluded   \n\nsuppose i make axis as 0 then gets error beacuse the length wont match","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T04:47:35.617410Z","iopub.status.idle":"2025-09-28T04:47:35.617643Z","shell.execute_reply.started":"2025-09-28T04:47:35.617534Z","shell.execute_reply":"2025-09-28T04:47:35.617544Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T04:47:35.620178Z","iopub.execute_input":"2025-09-28T04:47:35.620485Z","iopub.status.idle":"2025-09-28T04:47:35.638080Z","shell.execute_reply.started":"2025-09-28T04:47:35.620465Z","shell.execute_reply":"2025-09-28T04:47:35.637282Z"}},"outputs":[{"execution_count":55,"output_type":"execute_result","data":{"text/plain":"         Duration       Pulse    Maxpulse    Calories\ncount   32.000000   32.000000   32.000000   30.000000\nmean    68.437500  103.500000  128.500000  304.680000\nstd     70.039591    7.832933   12.998759   66.003779\nmin     30.000000   90.000000  101.000000  195.100000\n25%     60.000000  100.000000  120.000000  250.700000\n50%     60.000000  102.500000  127.500000  291.200000\n75%     60.000000  106.500000  132.250000  343.975000\nmax    450.000000  130.000000  175.000000  479.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Duration</th>\n      <th>Pulse</th>\n      <th>Maxpulse</th>\n      <th>Calories</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>32.000000</td>\n      <td>32.000000</td>\n      <td>32.000000</td>\n      <td>30.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>68.437500</td>\n      <td>103.500000</td>\n      <td>128.500000</td>\n      <td>304.680000</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>70.039591</td>\n      <td>7.832933</td>\n      <td>12.998759</td>\n      <td>66.003779</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>30.000000</td>\n      <td>90.000000</td>\n      <td>101.000000</td>\n      <td>195.100000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>60.000000</td>\n      <td>100.000000</td>\n      <td>120.000000</td>\n      <td>250.700000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>60.000000</td>\n      <td>102.500000</td>\n      <td>127.500000</td>\n      <td>291.200000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>60.000000</td>\n      <td>106.500000</td>\n      <td>132.250000</td>\n      <td>343.975000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>450.000000</td>\n      <td>130.000000</td>\n      <td>175.000000</td>\n      <td>479.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":55},{"cell_type":"markdown","source":"Now we need to check outliers are present or not before data cleaning, so we have methods like describe() to calculate IQR method or we can boxplot to see and also we can use z-score to find outliers","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\ndf['Calories'].plot(kind='box')\n\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T04:47:35.639327Z","iopub.execute_input":"2025-09-28T04:47:35.639568Z","iopub.status.idle":"2025-09-28T04:47:35.759767Z","shell.execute_reply.started":"2025-09-28T04:47:35.639547Z","shell.execute_reply":"2025-09-28T04:47:35.758833Z"}},"outputs":[{"execution_count":56,"output_type":"execute_result","data":{"text/plain":"<Axes: >"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":56},{"cell_type":"markdown","source":"#example of ploting to view outliers\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Sample Salary data\ndata = [30000, 35000, 40000, 45000, 50000, 55000, 60000, 150000]\ndf = pd.DataFrame({'Salary': data})\n\n# Create boxplot\nplt.figure(figsize=(6, 6))\nbox = df['Salary'].plot(kind='box')\n\n# Add labels and title\nplt.title(\"Salary Distribution with Outlier\")\nplt.ylabel(\"Salary ($)\")\n\n# Show the plot\nplt.show()\n\n\n\n\n\nWhen you make a boxplot:\n\nBox = middle 50% of the data (Q1 to Q3).\n\nWhiskers = normal spread of data within 1.5 × IQR.\n\nDots (points outside whiskers) = outliers.\n\nSo if you see dots above or below the whiskers, those are the outliers in your data.\n\n👉 Small note: sometimes the library (like matplotlib or seaborn) may use different symbols for outliers — circles, dots, or even stars — but the meaning is always the same: values too far away from the rest of the data.","metadata":{}},{"cell_type":"code","source":"df.corr()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T04:47:35.760695Z","iopub.execute_input":"2025-09-28T04:47:35.760946Z","iopub.status.idle":"2025-09-28T04:47:35.774592Z","shell.execute_reply.started":"2025-09-28T04:47:35.760924Z","shell.execute_reply":"2025-09-28T04:47:35.773025Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_36/1134722465.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcorr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mcorr\u001b[0;34m(self, method, min_periods, numeric_only)\u001b[0m\n\u001b[1;32m  11047\u001b[0m         \u001b[0mcols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m  11048\u001b[0m         \u001b[0midx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcols\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m> 11049\u001b[0;31m         \u001b[0mmat\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mna_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnan\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m  11050\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m  11051\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmethod\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"pearson\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mto_numpy\u001b[0;34m(self, dtype, copy, na_value)\u001b[0m\n\u001b[1;32m   1991\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdtype\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1992\u001b[0m             \u001b[0mdtype\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1993\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mna_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mna_value\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1994\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1995\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mas_array\u001b[0;34m(self, dtype, copy, na_value)\u001b[0m\n\u001b[1;32m   1692\u001b[0m                 \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflags\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwriteable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1693\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1694\u001b[0;31m             \u001b[0marr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_interleave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mna_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mna_value\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1695\u001b[0m             \u001b[0;31m# The underlying data was copied within _interleave, so no need\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1696\u001b[0m             \u001b[0;31m# to further copy if copy=True or setting na_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36m_interleave\u001b[0;34m(self, dtype, na_value)\u001b[0m\n\u001b[1;32m   1751\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1752\u001b[0m                 \u001b[0marr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mblk\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1753\u001b[0;31m             \u001b[0mresult\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1754\u001b[0m             \u001b[0mitemmask\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1755\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: could not convert string to float: \"'2020/12/01'\""],"ename":"ValueError","evalue":"could not convert string to float: \"'2020/12/01'\"","output_type":"error"}],"execution_count":57},{"cell_type":"markdown","source":"we got error because we have string datatype column so we need to take only numeric columns","metadata":{}},{"cell_type":"code","source":"df_numeric=df.select_dtypes(include='number')\ndf_numeric.corr()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T04:47:35.775647Z","iopub.status.idle":"2025-09-28T04:47:35.775964Z","shell.execute_reply.started":"2025-09-28T04:47:35.775829Z","shell.execute_reply":"2025-09-28T04:47:35.775848Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.duplicated()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T04:47:35.777079Z","iopub.status.idle":"2025-09-28T04:47:35.777483Z","shell.execute_reply.started":"2025-09-28T04:47:35.777285Z","shell.execute_reply":"2025-09-28T04:47:35.777303Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"we found a duplicates so need to drop before filling ","metadata":{}},{"cell_type":"code","source":"df.drop_duplicates()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T04:47:35.778942Z","iopub.status.idle":"2025-09-28T04:47:35.779285Z","shell.execute_reply.started":"2025-09-28T04:47:35.779095Z","shell.execute_reply":"2025-09-28T04:47:35.779128Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"there is no dependacy between duration and calories and even no strong dependancy between any columns in this case we can fill with mean median or mode","metadata":{}},{"cell_type":"markdown","source":"Rule of thumb\n\nCheck correlation for numeric columns\n\nUse group means/boxplots for numeric vs categorical\n\nUse crosstabs for categorical vs categorical","metadata":{}},{"cell_type":"code","source":"df['Calories'].fillna(df['Calories'].median(), inplace=True)\ndf","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T04:48:02.112473Z","iopub.execute_input":"2025-09-28T04:48:02.112791Z","iopub.status.idle":"2025-09-28T04:48:02.125912Z","shell.execute_reply.started":"2025-09-28T04:48:02.112765Z","shell.execute_reply":"2025-09-28T04:48:02.125070Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/3166028926.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df['Calories'].fillna(df['Calories'].median(), inplace=True)\n","output_type":"stream"},{"execution_count":59,"output_type":"execute_result","data":{"text/plain":"    Duration          Date  Pulse  Maxpulse  Calories\n0         60  '2020/12/01'    110       130     409.1\n1         60  '2020/12/02'    117       145     479.0\n2         60  '2020/12/03'    103       135     340.0\n3         45  '2020/12/04'    109       175     282.4\n4         45  '2020/12/05'    117       148     406.0\n5         60  '2020/12/06'    102       127     300.0\n6         60  '2020/12/07'    110       136     374.0\n7        450  '2020/12/08'    104       134     253.3\n8         30  '2020/12/09'    109       133     195.1\n9         60  '2020/12/10'     98       124     269.0\n10        60  '2020/12/11'    103       147     329.3\n11        60  '2020/12/12'    100       120     250.7\n12        60  '2020/12/12'    100       120     250.7\n13        60  '2020/12/13'    106       128     345.3\n14        60  '2020/12/14'    104       132     379.3\n15        60  '2020/12/15'     98       123     275.0\n16        60  '2020/12/16'     98       120     215.2\n17        60  '2020/12/17'    100       120     300.0\n18        45  '2020/12/18'     90       112     291.2\n19        60  '2020/12/19'    103       123     323.0\n20        45  '2020/12/20'     97       125     243.0\n21        60  '2020/12/21'    108       131     364.2\n22        45           NaN    100       119     282.0\n23        60  '2020/12/23'    130       101     300.0\n24        45  '2020/12/24'    105       132     246.0\n25        60  '2020/12/25'    102       126     334.5\n26        60      20201226    100       120     250.0\n27        60  '2020/12/27'     92       118     241.0\n28        60  '2020/12/28'    103       132     291.2\n29        60  '2020/12/29'    100       132     280.0\n30        60  '2020/12/30'    102       129     380.3\n31        60  '2020/12/31'     92       115     243.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Duration</th>\n      <th>Date</th>\n      <th>Pulse</th>\n      <th>Maxpulse</th>\n      <th>Calories</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>60</td>\n      <td>'2020/12/01'</td>\n      <td>110</td>\n      <td>130</td>\n      <td>409.1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>60</td>\n      <td>'2020/12/02'</td>\n      <td>117</td>\n      <td>145</td>\n      <td>479.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>60</td>\n      <td>'2020/12/03'</td>\n      <td>103</td>\n      <td>135</td>\n      <td>340.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>45</td>\n      <td>'2020/12/04'</td>\n      <td>109</td>\n      <td>175</td>\n      <td>282.4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>45</td>\n      <td>'2020/12/05'</td>\n      <td>117</td>\n      <td>148</td>\n      <td>406.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>60</td>\n      <td>'2020/12/06'</td>\n      <td>102</td>\n      <td>127</td>\n      <td>300.0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>60</td>\n      <td>'2020/12/07'</td>\n      <td>110</td>\n      <td>136</td>\n      <td>374.0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>450</td>\n      <td>'2020/12/08'</td>\n      <td>104</td>\n      <td>134</td>\n      <td>253.3</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>30</td>\n      <td>'2020/12/09'</td>\n      <td>109</td>\n      <td>133</td>\n      <td>195.1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>60</td>\n      <td>'2020/12/10'</td>\n      <td>98</td>\n      <td>124</td>\n      <td>269.0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>60</td>\n      <td>'2020/12/11'</td>\n      <td>103</td>\n      <td>147</td>\n      <td>329.3</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>60</td>\n      <td>'2020/12/12'</td>\n      <td>100</td>\n      <td>120</td>\n      <td>250.7</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>60</td>\n      <td>'2020/12/12'</td>\n      <td>100</td>\n      <td>120</td>\n      <td>250.7</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>60</td>\n      <td>'2020/12/13'</td>\n      <td>106</td>\n      <td>128</td>\n      <td>345.3</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>60</td>\n      <td>'2020/12/14'</td>\n      <td>104</td>\n      <td>132</td>\n      <td>379.3</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>60</td>\n      <td>'2020/12/15'</td>\n      <td>98</td>\n      <td>123</td>\n      <td>275.0</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>60</td>\n      <td>'2020/12/16'</td>\n      <td>98</td>\n      <td>120</td>\n      <td>215.2</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>60</td>\n      <td>'2020/12/17'</td>\n      <td>100</td>\n      <td>120</td>\n      <td>300.0</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>45</td>\n      <td>'2020/12/18'</td>\n      <td>90</td>\n      <td>112</td>\n      <td>291.2</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>60</td>\n      <td>'2020/12/19'</td>\n      <td>103</td>\n      <td>123</td>\n      <td>323.0</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>45</td>\n      <td>'2020/12/20'</td>\n      <td>97</td>\n      <td>125</td>\n      <td>243.0</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>60</td>\n      <td>'2020/12/21'</td>\n      <td>108</td>\n      <td>131</td>\n      <td>364.2</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>45</td>\n      <td>NaN</td>\n      <td>100</td>\n      <td>119</td>\n      <td>282.0</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>60</td>\n      <td>'2020/12/23'</td>\n      <td>130</td>\n      <td>101</td>\n      <td>300.0</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>45</td>\n      <td>'2020/12/24'</td>\n      <td>105</td>\n      <td>132</td>\n      <td>246.0</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>60</td>\n      <td>'2020/12/25'</td>\n      <td>102</td>\n      <td>126</td>\n      <td>334.5</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>60</td>\n      <td>20201226</td>\n      <td>100</td>\n      <td>120</td>\n      <td>250.0</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>60</td>\n      <td>'2020/12/27'</td>\n      <td>92</td>\n      <td>118</td>\n      <td>241.0</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>60</td>\n      <td>'2020/12/28'</td>\n      <td>103</td>\n      <td>132</td>\n      <td>291.2</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>60</td>\n      <td>'2020/12/29'</td>\n      <td>100</td>\n      <td>132</td>\n      <td>280.0</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>60</td>\n      <td>'2020/12/30'</td>\n      <td>102</td>\n      <td>129</td>\n      <td>380.3</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>60</td>\n      <td>'2020/12/31'</td>\n      <td>92</td>\n      <td>115</td>\n      <td>243.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":59},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T04:48:37.356367Z","iopub.execute_input":"2025-09-28T04:48:37.357037Z","iopub.status.idle":"2025-09-28T04:48:37.366015Z","shell.execute_reply.started":"2025-09-28T04:48:37.357012Z","shell.execute_reply":"2025-09-28T04:48:37.365244Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 32 entries, 0 to 31\nData columns (total 5 columns):\n #   Column    Non-Null Count  Dtype  \n---  ------    --------------  -----  \n 0   Duration  32 non-null     int64  \n 1   Date      31 non-null     object \n 2   Pulse     32 non-null     int64  \n 3   Maxpulse  32 non-null     int64  \n 4   Calories  32 non-null     float64\ndtypes: float64(1), int64(3), object(1)\nmemory usage: 1.4+ KB\n","output_type":"stream"}],"execution_count":61},{"cell_type":"code","source":"df['Date']=pd.to_datetime(df['Date'], errors='coerce')\ndf.dtypes","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T04:49:39.937386Z","iopub.execute_input":"2025-09-28T04:49:39.937718Z","iopub.status.idle":"2025-09-28T04:49:39.945945Z","shell.execute_reply.started":"2025-09-28T04:49:39.937693Z","shell.execute_reply":"2025-09-28T04:49:39.945278Z"}},"outputs":[{"execution_count":62,"output_type":"execute_result","data":{"text/plain":"Duration             int64\nDate        datetime64[ns]\nPulse                int64\nMaxpulse             int64\nCalories           float64\ndtype: object"},"metadata":{}}],"execution_count":62},{"cell_type":"markdown","source":"interpolate() fills missing values linearly based on neighboring values.\n\nFor dates, it converts dates to numbers, fills the gaps proportionally, then converts back to dates.","metadata":{}},{"cell_type":"code","source":"df['Date']=df['Date'].interpolate()\ndf","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T04:49:50.080437Z","iopub.execute_input":"2025-09-28T04:49:50.080738Z","iopub.status.idle":"2025-09-28T04:49:50.093067Z","shell.execute_reply.started":"2025-09-28T04:49:50.080714Z","shell.execute_reply":"2025-09-28T04:49:50.092400Z"}},"outputs":[{"execution_count":64,"output_type":"execute_result","data":{"text/plain":"    Duration       Date  Pulse  Maxpulse  Calories\n0         60 2020-12-01    110       130     409.1\n1         60 2020-12-02    117       145     479.0\n2         60 2020-12-03    103       135     340.0\n3         45 2020-12-04    109       175     282.4\n4         45 2020-12-05    117       148     406.0\n5         60 2020-12-06    102       127     300.0\n6         60 2020-12-07    110       136     374.0\n7        450 2020-12-08    104       134     253.3\n8         30 2020-12-09    109       133     195.1\n9         60 2020-12-10     98       124     269.0\n10        60 2020-12-11    103       147     329.3\n11        60 2020-12-12    100       120     250.7\n12        60 2020-12-12    100       120     250.7\n13        60 2020-12-13    106       128     345.3\n14        60 2020-12-14    104       132     379.3\n15        60 2020-12-15     98       123     275.0\n16        60 2020-12-16     98       120     215.2\n17        60 2020-12-17    100       120     300.0\n18        45 2020-12-18     90       112     291.2\n19        60 2020-12-19    103       123     323.0\n20        45 2020-12-20     97       125     243.0\n21        60 2020-12-21    108       131     364.2\n22        45 2020-12-22    100       119     282.0\n23        60 2020-12-23    130       101     300.0\n24        45 2020-12-24    105       132     246.0\n25        60 2020-12-25    102       126     334.5\n26        60 2020-12-26    100       120     250.0\n27        60 2020-12-27     92       118     241.0\n28        60 2020-12-28    103       132     291.2\n29        60 2020-12-29    100       132     280.0\n30        60 2020-12-30    102       129     380.3\n31        60 2020-12-31     92       115     243.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Duration</th>\n      <th>Date</th>\n      <th>Pulse</th>\n      <th>Maxpulse</th>\n      <th>Calories</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>60</td>\n      <td>2020-12-01</td>\n      <td>110</td>\n      <td>130</td>\n      <td>409.1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>60</td>\n      <td>2020-12-02</td>\n      <td>117</td>\n      <td>145</td>\n      <td>479.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>60</td>\n      <td>2020-12-03</td>\n      <td>103</td>\n      <td>135</td>\n      <td>340.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>45</td>\n      <td>2020-12-04</td>\n      <td>109</td>\n      <td>175</td>\n      <td>282.4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>45</td>\n      <td>2020-12-05</td>\n      <td>117</td>\n      <td>148</td>\n      <td>406.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>60</td>\n      <td>2020-12-06</td>\n      <td>102</td>\n      <td>127</td>\n      <td>300.0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>60</td>\n      <td>2020-12-07</td>\n      <td>110</td>\n      <td>136</td>\n      <td>374.0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>450</td>\n      <td>2020-12-08</td>\n      <td>104</td>\n      <td>134</td>\n      <td>253.3</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>30</td>\n      <td>2020-12-09</td>\n      <td>109</td>\n      <td>133</td>\n      <td>195.1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>60</td>\n      <td>2020-12-10</td>\n      <td>98</td>\n      <td>124</td>\n      <td>269.0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>60</td>\n      <td>2020-12-11</td>\n      <td>103</td>\n      <td>147</td>\n      <td>329.3</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>60</td>\n      <td>2020-12-12</td>\n      <td>100</td>\n      <td>120</td>\n      <td>250.7</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>60</td>\n      <td>2020-12-12</td>\n      <td>100</td>\n      <td>120</td>\n      <td>250.7</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>60</td>\n      <td>2020-12-13</td>\n      <td>106</td>\n      <td>128</td>\n      <td>345.3</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>60</td>\n      <td>2020-12-14</td>\n      <td>104</td>\n      <td>132</td>\n      <td>379.3</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>60</td>\n      <td>2020-12-15</td>\n      <td>98</td>\n      <td>123</td>\n      <td>275.0</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>60</td>\n      <td>2020-12-16</td>\n      <td>98</td>\n      <td>120</td>\n      <td>215.2</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>60</td>\n      <td>2020-12-17</td>\n      <td>100</td>\n      <td>120</td>\n      <td>300.0</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>45</td>\n      <td>2020-12-18</td>\n      <td>90</td>\n      <td>112</td>\n      <td>291.2</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>60</td>\n      <td>2020-12-19</td>\n      <td>103</td>\n      <td>123</td>\n      <td>323.0</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>45</td>\n      <td>2020-12-20</td>\n      <td>97</td>\n      <td>125</td>\n      <td>243.0</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>60</td>\n      <td>2020-12-21</td>\n      <td>108</td>\n      <td>131</td>\n      <td>364.2</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>45</td>\n      <td>2020-12-22</td>\n      <td>100</td>\n      <td>119</td>\n      <td>282.0</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>60</td>\n      <td>2020-12-23</td>\n      <td>130</td>\n      <td>101</td>\n      <td>300.0</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>45</td>\n      <td>2020-12-24</td>\n      <td>105</td>\n      <td>132</td>\n      <td>246.0</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>60</td>\n      <td>2020-12-25</td>\n      <td>102</td>\n      <td>126</td>\n      <td>334.5</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>60</td>\n      <td>2020-12-26</td>\n      <td>100</td>\n      <td>120</td>\n      <td>250.0</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>60</td>\n      <td>2020-12-27</td>\n      <td>92</td>\n      <td>118</td>\n      <td>241.0</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>60</td>\n      <td>2020-12-28</td>\n      <td>103</td>\n      <td>132</td>\n      <td>291.2</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>60</td>\n      <td>2020-12-29</td>\n      <td>100</td>\n      <td>132</td>\n      <td>280.0</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>60</td>\n      <td>2020-12-30</td>\n      <td>102</td>\n      <td>129</td>\n      <td>380.3</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>60</td>\n      <td>2020-12-31</td>\n      <td>92</td>\n      <td>115</td>\n      <td>243.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":64},{"cell_type":"markdown","source":"Works only on numeric or datetime types\n\nFills NaNs proportionally between known values\n\nDefault is linear interpolation, but you can also specify methods like time, polynomial, etc.","metadata":{}},{"cell_type":"code","source":"df['Calories'].plot(kind='hist',bins=20)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T04:53:57.863631Z","iopub.execute_input":"2025-09-28T04:53:57.863916Z","iopub.status.idle":"2025-09-28T04:53:58.058445Z","shell.execute_reply.started":"2025-09-28T04:53:57.863893Z","shell.execute_reply":"2025-09-28T04:53:58.057525Z"}},"outputs":[{"execution_count":66,"output_type":"execute_result","data":{"text/plain":"<Axes: ylabel='Frequency'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":66},{"cell_type":"markdown","source":"we found one duplicate so we need to ","metadata":{}}]}